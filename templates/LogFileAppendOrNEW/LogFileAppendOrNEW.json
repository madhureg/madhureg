{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"LS_AzureBlobStorage": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LogFileAppendOrNEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "logFileName",
							"value": {
								"value": "@concat(formatDateTime(utcnow(),'yyyy-mm-dd'),'_log.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_logfile",
								"type": "DatasetReference",
								"parameters": {
									"logfilename": {
										"value": "@variables('logFileName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Metadata1').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "LogExecutionInFIle",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LogExecutionInFIle",
											"type": "DataFlowReference",
											"parameters": {
												"adfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"pipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"runID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"triggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"logFileName": {
													"value": "'@{variables('logFileName')}'",
													"type": "Expression"
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "LogExecutionInFIle_append",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LogExecutionInFIle_append",
											"type": "DataFlowReference",
											"parameters": {
												"adfName": {
													"value": "'@{pipeline().DataFactory}'",
													"type": "Expression"
												},
												"pipelineName": {
													"value": "'@{pipeline().Pipeline}'",
													"type": "Expression"
												},
												"runID": {
													"value": "'@{pipeline().RunId}'",
													"type": "Expression"
												},
												"triggerName": {
													"value": "'@{pipeline().TriggerName}'",
													"type": "Expression"
												},
												"logFileName": {
													"value": "'@{variables('logFileName')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"LogFIle": {
													"logfilename": {
														"value": "@variables('logFileName')",
														"type": "Expression"
													}
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"variables": {
					"logFileName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_logfile')]",
				"[concat(variables('factoryId'), '/dataflows/LogExecutionInFIle_append')]",
				"[concat(variables('factoryId'), '/dataflows/LogExecutionInFIle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_logfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_AzureBlobStorage')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"logfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().logfilename",
							"type": "Expression"
						},
						"folderPath": "log",
						"container": "adfstorage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogExecutionInFIle_append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						},
						{
							"dataset": {
								"referenceName": "ds_logfile",
								"type": "DatasetReference"
							},
							"name": "LogFIle"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SaveFileOutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AddingColumns"
						},
						{
							"name": "RemovingUnWantedColumns"
						},
						{
							"name": "Union1"
						}
					],
					"script": "parameters{\n\tadfName as string,\n\tpipelineName as string,\n\trunID as string,\n\ttriggerName as string,\n\tlogFileName as string\n}\nsource(output(\n\t\tid as string,\n\t\tname as string,\n\t\tage as string,\n\t\trunningtotal as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceData\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\twildcardPaths:[('log/'+$logFileName)]) ~> LogFIle\nSourceData derive(adfName = $adfName,\n\t\tpipelineName = $pipelineName,\n\t\trunID = $runID,\n\t\ttriggerName = $triggerName) ~> AddingColumns\nAddingColumns select(mapColumn(\n\t\tadfName,\n\t\tpipelineName,\n\t\trunID,\n\t\ttriggerName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemovingUnWantedColumns\nRemovingUnWantedColumns, LogFIle union(byName: true)~> Union1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($logFileName)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source')]",
				"[concat(variables('factoryId'), '/datasets/ds_logfile')]",
				"[concat(variables('factoryId'), '/datasets/SaveFileOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LogExecutionInFIle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SaveFileOutput",
								"type": "DatasetReference"
							},
							"name": "OutputStore"
						}
					],
					"transformations": [
						{
							"name": "AddingColumns"
						},
						{
							"name": "RemovingUnWantedColumns"
						}
					],
					"script": "parameters{\n\tadfName as string,\n\tpipelineName as string,\n\trunID as string,\n\ttriggerName as string,\n\tlogFileName as string\n}\nsource(output(\n\t\tid as string,\n\t\tname as string,\n\t\tage as string,\n\t\trunningtotal as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> SourceData\nSourceData derive(adfName = $adfName,\n\t\tpipelineName = $pipelineName,\n\t\trunID = $runID,\n\t\ttriggerName = $triggerName) ~> AddingColumns\nAddingColumns select(mapColumn(\n\t\tadfName,\n\t\tpipelineName,\n\t\trunID,\n\t\ttriggerName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemovingUnWantedColumns\nRemovingUnWantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[($logFileName)],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> OutputStore"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source')]",
				"[concat(variables('factoryId'), '/datasets/SaveFileOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_AzureBlobStorage')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Incremental.txt",
						"folderPath": "inbox",
						"container": "adfstorage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "runningtotal",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SaveFileOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_AzureBlobStorage')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "log",
						"container": "adfstorage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}